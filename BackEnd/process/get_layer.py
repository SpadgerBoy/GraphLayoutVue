'''
对图网络进行处理，获取分层信息
'''

import networkx as nx
import pygraphviz as pgv


def layer_graph(all_edges):

        G = nx.DiGraph()

        for edge in all_edges:
            G.add_edge(int(edge[0]), int(edge[1]))

        A = nx.nx_agraph.to_agraph(G)
        A.layout(prog='dot')

        layers = {}
        for node in A.nodes():
            pos = node.attr['pos']
            if pos:
                x, y = map(float, pos.split(','))
                if y not in layers:
                    layers[y] = []
                layers[y].append(int(node))

        sorted_layers = [layers[key] for key in sorted(layers.keys(), reverse=True)]

        node_level = [0 for _ in range(len(A.nodes()))]
        for i, nodes in enumerate(sorted_layers):
            for j, node in enumerate(nodes):
                node_level[int(node)] = i+1

        return node_level

if __name__ == '__main__':

    edges = [[0, 21], [1, 13], [2, 21], [2, 16], [3, 16], [4, 10], [5, 21], [5, 20], [6, 21], [6, 20], [7, 16],
                 [7, 12], [8, 17], [8, 15], [9, 15], [10, 27], [11, 27], [12, 26], [13, 23], [14, 27], [14, 24],
                 [15, 27], [16, 22], [17, 27], [18, 28], [19, 30], [20, 27], [21, 24], [22, 32], [23, 33], [23, 32],
                 [24, 39], [24, 36], [25, 32], [25, 39], [26, 34], [27, 38], [28, 34], [29, 35], [30, 37], [30, 39],
                 [31, 47], [31, 44], [32, 45], [32, 48], [33, 49], [33, 46], [34, 42], [35, 48], [35, 42], [36, 43],
                 [36, 45], [37, 43], [38, 47], [38, 46], [39, 44], [40, 47], [41, 47], [41, 48], [42, 58], [42, 50],
                 [43, 56], [44, 60], [44, 54], [45, 54], [46, 53], [47, 54], [47, 55], [48, 52], [48, 58], [49, 51],
                 [49, 58], [50, 63], [50, 65], [51, 68], [52, 65], [53, 67], [54, 62], [55, 67], [55, 66], [56, 63],
                 [57, 65], [58, 68], [59, 62], [59, 66], [60, 68], [61, 63], [61, 68], [62, 75], [63, 79], [63, 80],
                 [64, 74], [65, 71], [65, 79], [66, 73], [66, 72], [67, 70], [68, 71], [68, 78], [69, 88], [70, 84],
                 [71, 86], [72, 87], [73, 81], [74, 87], [75, 88], [75, 84], [76, 82], [77, 87], [77, 89], [78, 86],
                 [79, 90], [79, 81], [80, 84], [81, 92], [81, 97], [82, 94], [82, 92], [83, 96], [83, 95], [84, 93],
                 [85, 96], [86, 92], [86, 97], [87, 96], [88, 92], [89, 94], [89, 99], [90, 91], [90, 98]]

    node_num = 100


    

